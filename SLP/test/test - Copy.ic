class Empty{}

class EmptyExtends extends Object{}

class FieldsOnly{
	boolean boolField;
	int		intField;
	string	stringField;
	MyClass myclassField1, myclassField2, myclassField3;

	boolean[]	boolArrayField;
	int[]		intArrayField;
	string[][]	stringDoubleArrayField1, stringDoubleArrayField2, stringDoubleArrayField3;
	MyClass[]	myclassArrayField;
}

class EmptyMethodsOnly{
	void voidEmpty(){}
	static void staticVoidEmpty(int i){}
	int intEmpty(boolean i){}
	static int staticIntEmpty(string i){}
	boolean boolEmpty(Myclass i){}
	static boolean staticBoolEmpty(int i, string j){}
	string stringEmpty(boolean i, Myclass j){}
	static string staticStringEmpty(int[] i, Myclass[] j){}
	Myclass myclassEmpty(string[][] i, boolean[][] j, Myclass[][] k){}
	static Myclass staticMyclassEmpty(){}

	int[][] intEmpty(){}
	static int[][] staticIntEmpty(){}
	boolean[][] boolEmpty(){}
	static boolean[][] staticBoolEmpty(){}
	string[] stringEmpty(){}
	static string[] staticStringEmpty(){}
	Myclass[][] myclassEmpty(){}
	static Myclass[][] staticMyclassEmpty(){}
}

class FieldsAndMethods{
	int		intField;
	MyClass myclassField;

	static void oneStmt(){
		break;
	}

	int multipleStmts(){
		break;
		continue;
		return;
	}

	Myclass stmtCheck(int[][] i, boolean[] boo, string str, Myclass my){
		str = 0;
		str.field = 0;
		str[0] = 0;

		Myclass.emptyStaticCall();
		Myclass.staticCall((this));
		Myclass.staticCall((this), !not);
		virtCall(new string[0]);
		0.virtCall();
		return 0;
		if (0) {}
		if (1) {} else {}
		if (2) if (3) break; else {continue;}
		while(7) {}
		while(8) continue;
		while(9){
			break; 
			continue;
		}
		{ int stmtBlock; }
		Myclass m;
		string s = !s;

		// some crazy stuff
		new int[5][0] = -!-(5+7)[7+9].length;
	}

	void exprCheck(){
		str = str;
		str = my.field;
		str = str[0];
		str = Myclass.emptyStaticCall();
		str = this;
		str = new Myclass();
		str = new string[0];
		str = str.length;
		str = str <= str;
		str = str && str;
		str = -!-!-!-!-str;
		str = 7;
		str = "quote";
		str = true;
		str = false;
		str = ((null));
	}
}